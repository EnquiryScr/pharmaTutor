name: Backend API Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'code/nodejs_backend/**'
      - '.github/workflows/backend-workflow.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'code/nodejs_backend/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'code/nodejs_backend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd code/nodejs_backend
        npm ci
        
    - name: Run ESLint
      run: |
        cd code/nodejs_backend
        npm run lint
        
    - name: Run unit tests
      run: |
        cd code/nodejs_backend
        npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: |
        cd code/nodejs_backend
        npm test -- --testPathPattern=integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        
    - name: Generate test coverage
      run: |
        cd code/nodejs_backend
        npm test -- --coverage --coverageDirectory=coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./code/nodejs_backend/coverage/lcov.info
        fail_ci_if_error: true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./code/nodejs_backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Pull staging image
      run: |
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster tutoring-staging-cluster \
          --service tutoring-backend-staging \
          --force-new-deployment \
          --task-definition tutoring-backend-staging-task \
          --cluster tutoring-staging-cluster
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Run database migrations
      run: |
        aws ecs run-task \
          --cluster tutoring-production-cluster \
          --task-definition tutoring-migration-task \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-12345678],securityGroups=[sg-12345678],assignPublicIp=ENABLED}"
      env:
        TASK_DEFINITION_ARN: ${{ secrets.MIGRATION_TASK_DEFINITION_ARN }}
        
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster tutoring-production-cluster \
          --service tutoring-backend-production \
          --force-new-deployment \
          --task-definition tutoring-backend-production-task \
          --cluster tutoring-production-cluster
      env:
        CLUSTER_NAME: ${{ secrets.PRODUCTION_CLUSTER_NAME }}
        SERVICE_NAME: ${{ secrets.PRODUCTION_SERVICE_NAME }}

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run health check
      run: |
        BACKEND_URL="${{ needs.deploy-staging.outputs.backend-url || secrets.PRODUCTION_API_URL }}"
        response=$(curl -f -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/health" || echo "000")
        if [ "$response" != "200" ]; then
          echo "Backend health check failed with status code: $response"
          exit 1
        fi
        
    - name: Run API tests
      run: |
        npm install -g newman
        newman run api-tests/postman-collection.json \
          --environment api-tests/environments/staging.postman_environment.json \
          --reporters cli,json
      env:
        API_BASE_URL: ${{ needs.deploy-staging.outputs.backend-url || secrets.PRODUCTION_API_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, smoke-test]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Rollback ECS service
      run: |
        aws ecs update-service \
          --cluster tutoring-production-cluster \
          --service tutoring-backend-production \
          --force-new-deployment \
          --task-definition tutoring-backend-production-task \
          --cluster tutoring-production-cluster

  notification:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, smoke-test, rollback]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#backend-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
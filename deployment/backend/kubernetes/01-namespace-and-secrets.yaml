# Kubernetes deployment configuration for tutoring platform backend

apiVersion: v1
kind: Namespace
metadata:
  name: tutoring-platform
  labels:
    name: tutoring-platform
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: tutoring-config
  namespace: tutoring-platform
data:
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  JWT_SECRET: "tutoring-platform-jwt-secret"
  FIREBASE_PROJECT_ID: "tutoring-platform"
  STRIPE_SECRET_KEY: "sk_test_..."
  REDIS_HOST: "redis-service"
  ELASTICSEARCH_HOST: "elasticsearch-service"

---
# Secret for sensitive environment variables
apiVersion: v1
kind: Secret
metadata:
  name: tutoring-secrets
  namespace: tutoring-platform
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  DATABASE_URL: cG9zdGdyZXNxbDovL3R1dG9yaW5nX3VzZXI6cGFzc3dvcmRAcG9zdGdyZXMtc2VydmljZTo1NDMyL3R1dG9yaW5nX2Ri
  REDIS_PASSWORD: cGFzc3dvcmQ=
  STRIPE_WEBHOOK_SECRET: c2V0X3lvdXJfc3RyaXBlX3dlYmhvb2tfc2VjcmV0
  JWT_SECRET: dHV0b3JpbmctcGxhdGZvcm0tanR3LXNlY3JldA==
  FIREBASE_PRIVATE_KEY: ZmlyZWJhc2UtcHJpdmF0ZS1rZXk=
  ENCRYPTION_KEY: ZW5jcnlwdGlvbi1rZXk=

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: tutoring-platform
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: tutoring_db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: tutoring-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --requirepass
        - "$(REDIS_PASSWORD)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tutoring-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Elasticsearch Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: tutoring-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: elasticsearch:8.8.0
        env:
        - name: discovery.type
          value: "single-node"
        - name: "ES_JAVA_OPTS"
          value: "-Xms512m -Xmx512m"
        - name: xpack.security.enabled
          value: "false"
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        volumeMounts:
        - name: elasticsearch-storage
          mountPath: /usr/share/elasticsearch/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: elasticsearch-storage
        persistentVolumeClaim:
          claimName: elasticsearch-pvc

---
# Backend API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tutoring-api
  namespace: tutoring-platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tutoring-api
  template:
    metadata:
      labels:
        app: tutoring-api
    spec:
      containers:
      - name: tutoring-api
        image: ghcr.io/tutoring-platform/backend:latest
        imagePullPolicy: Always
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: tutoring-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: tutoring-config
              key: PORT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: tutoring-secrets
              key: DATABASE_URL
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tutoring-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: tutoring-secrets
              key: JWT_SECRET
        - name: STRIPE_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: tutoring-secrets
              key: STRIPE_WEBHOOK_SECRET
        ports:
        - containerPort: 3000
          name: http
        volumeMounts:
        - name: uploads-storage
          mountPath: /app/uploads
        - name: logs-storage
          mountPath: /app/logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: uploads-storage
        persistentVolumeClaim:
          claimName: uploads-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: logs-pvc
      securityContext:
        fsGroup: 1001
      imagePullSecrets:
      - name: registry-secret

---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tutoring-api-hpa
  namespace: tutoring-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tutoring-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: tutoring-api-service
  namespace: tutoring-platform
  labels:
    app: tutoring-api
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: tutoring-api

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: tutoring-platform
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: postgres
    protocol: TCP
    name: postgres
  selector:
    app: postgres

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: tutoring-platform
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: redis
    protocol: TCP
    name: redis
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
  namespace: tutoring-platform
spec:
  type: ClusterIP
  ports:
  - port: 9200
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: elasticsearch

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tutoring-api-ingress
  namespace: tutoring-platform
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.tutoring-platform.com
    secretName: tutoring-api-tls
  rules:
  - host: api.tutoring-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tutoring-api-service
            port:
              number: 3000
# Docker Compose configuration for tutoring platform backend

version: '3.8'

services:
  # Main application
  api:
    build:
      context: ../../code/nodejs_backend
      dockerfile: ../../deployment/backend/docker/Dockerfile
      target: production
    container_name: tutoring-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://tutoring_user:password@postgres:5432/tutoring_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - FIREBASE_PROJECT_ID=your-firebase-project
      - STRIPE_SECRET_KEY=sk_test_your_stripe_key
    volumes:
      - ../../code/nodejs_backend:/app
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tutoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tutoring-postgres
    environment:
      - POSTGRES_DB=tutoring_db
      - POSTGRES_USER=tutoring_user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - tutoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tutoring_user -d tutoring_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tutoring-redis
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tutoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Elasticsearch for search
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: tutoring-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - tutoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tutoring-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - tutoring-network
    restart: unless-stopped

  # Redis Queue for background jobs
  redis-queue:
    image: redis:7-alpine
    container_name: tutoring-redis-queue
    command: redis-server --appendonly yes --requirepass queue_password
    volumes:
      - redis_queue_data:/data
    networks:
      - tutoring-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    container_name: tutoring-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - tutoring-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana
    container_name: tutoring-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - tutoring-network
    restart: unless-stopped

  # ELK Stack for logging
  kibana:
    image: kibana:8.8.0
    container_name: tutoring-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - tutoring-network
    restart: unless-stopped

# Volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redis_queue_data:
    driver: local
  elasticsearch_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

# Network configuration
networks:
  tutoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
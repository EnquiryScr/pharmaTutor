stages:
  - test
  - build
  - security
  - deploy-staging
  - integration-tests
  - deploy-production

variables:
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

# Include template for testing
include:
  - template: Jobs/Report.qcow

# Flutter job template
.flutter_template: &flutter_template
  image: cirrusci/flutter:3.16.0
  before_script:
    - flutter config --no-analytics
    - flutter doctor -v
  cache:
    paths:
      - .pub-cache/
      - build/

# Android build template
.android_template: &android_template
  image: cirrusci/flutter:3.16.0
  before_script:
    - cd flutter_tutoring_app
    - flutter config --no-analytics
    - export ANDROID_HOME=/opt/android-sdk
    - export PATH=$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools
  cache:
    paths:
      - .pub-cache/
      - build/

# iOS build template
.ios_template: &ios_template
  image: cirrusci/flutter:3.16.0
  before_script:
    - cd flutter_tutoring_app
    - flutter config --no-analytics
    - xcrun --show-sdk-version --sdk iphoneos
    - pod repo update
  cache:
    paths:
      - .pub-cache/
      - build/

# Backend template
.backend_template: &backend_template
  image: node:18
  before_script:
    - cd code/nodejs_backend
    - npm ci
  cache:
    paths:
      - code/nodejs_backend/node_modules/

# =====================================
# FRONTEND & MOBILE JOBS
# =====================================

flutter-test:
  <<: *flutter_template
  stage: test
  script:
    - cd flutter_tutoring_app
    - flutter pub get
    - flutter analyze
    - flutter test --coverage
  coverage: '/Lines\s*:\s*\d+\.\d+\%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: flutter_tutoring_app/coverage/cobertura-coverage.xml
    paths:
      - flutter_tutoring_app/coverage/
  except:
    - schedules

android-build:
  <<: *android_template
  stage: build
  script:
    - cd flutter_tutoring_app
    - flutter pub get
    - flutter build apk --release --dart-define=ENV=production
  artifacts:
    paths:
      - flutter_tutoring_app/build/app/outputs/flutter-apk/app-release.apk
    expire_in: 1 week
  only:
    - main
    - develop

android-app-bundle:
  <<: *android_template
  stage: build
  script:
    - cd flutter_tutoring_app
    - flutter pub get
    - flutter build appbundle --release --dart-define=ENV=production
  artifacts:
    paths:
      - flutter_tutoring_app/build/app/outputs/bundle/release/app-release.aab
    expire_in: 1 week
  only:
    - main
    - develop

ios-build:
  <<: *ios_template
  stage: build
  script:
    - cd flutter_tutoring_app
    - flutter pub get
    - flutter build ios --release --no-codesign --dart-define=ENV=production
    - cd ios
    - xcodebuild -workspace Runner.xcworkspace -scheme Runner archive -archivePath Runner.xcarchive
    - xcodebuild -exportArchive -archivePath Runner.xcarchive -exportPath . -exportOptionsPlist ExportOptions.plist
  artifacts:
    paths:
      - flutter_tutoring_app/build/ios/iphoneos/Runner.app
    expire_in: 1 week
  only:
    - main
    - develop
  allow_failure: true

# =====================================
# BACKEND JOBS
# =====================================

backend-test:
  <<: *backend_template
  stage: test
  services:
    - postgres:15
    - redis:7
  variables:
    POSTGRES_PASSWORD: test_password
    POSTGRES_DB: test_db
  script:
    - cd code/nodejs_backend
    - npm run lint
    - npm test -- --coverage
  coverage: '/Statements\s*:\s*\d+\.\d+\%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: code/nodejs_backend/coverage/cobertura-coverage.xml
    paths:
      - code/nodejs_backend/coverage/
  except:
    - schedules

backend-build-docker:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - cd code/nodejs_backend
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
  only:
    - main
    - develop

# =====================================
# SECURITY SCANNING
# =====================================

security-scan-frontend:
  stage: security
  image: docker:latest
  services:
    - docker:24-dind
  before_script:
    - apk add --no-cache curl
  script:
    - docker run --rm -v $CI_PROJECT_DIR:/workspace.trivy aquasec/trivy:latest image --security-checks vuln --format json $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA > security-report.json
  artifacts:
    reports:
      dotenv: security-report.json
    paths:
      - security-report.json
  only:
    - main
    - develop

dependency-scan:
  stage: security
  image: node:18
  script:
    - npm install -g audit-ci
    - cd flutter_tutoring_app
    - echo "Scanning Flutter dependencies..."
    - cd ../code/nodejs_backend
    - echo "Scanning Node.js dependencies..."
    - npm audit --audit-level moderate
  allow_failure: true
  only:
    - main
    - develop

# =====================================
# STAGING DEPLOYMENT
# =====================================

deploy-staging-backend:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying backend to staging environment..."
    - curl -X POST "$STAGING_WEBHOOK_URL" -H "Content-Type: application/json" -d '{"version":"'$CI_COMMIT_SHA'","environment":"staging","service":"backend"}'
  environment:
    name: staging
    url: $STAGING_BACKEND_URL
  only:
    - develop

deploy-staging-mobile:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying mobile app to Firebase App Distribution..."
    - curl -X POST "$FIREBASE_WEBHOOK_URL" -H "Content-Type: application/json" -d '{"version":"'$CI_COMMIT_SHA'","environment":"staging","service":"mobile"}'
  environment:
    name: staging
  only:
    - develop

# =====================================
# INTEGRATION TESTS
# =====================================

integration-tests:
  stage: integration-tests
  image: node:18
  services:
    - postgres:15
    - redis:7
  variables:
    POSTGRES_PASSWORD: test_password
    POSTGRES_DB: integration_db
  before_script:
    - cd code/nodejs_backend
    - npm ci
    - npm install -g newman
  script:
    - cd code/nodejs_backend
    - NODE_ENV=test npm start &
    - sleep 10
    - newman run ../deployment/testing/postman/integration-tests.postman_collection.json --environment ../deployment/testing/postman/staging-environment.postman_environment.json
  environment:
    name: staging
  only:
    - develop

e2e-tests:
  stage: integration-tests
  image: mcr.microsoft.com/playwright:v1.40.0-focal
  before_script:
    - cd flutter_tutoring_app
    - flutter build web --release
    - cd build/web
    - npx serve -s . -l 8080 &
    - sleep 3
  script:
    - cd ../deployment/testing/e2e
    - npm install
    - npx playwright test
  artifacts:
    reports:
      junit: test-results/results.xml
    paths:
      - test-results/
  allow_failure: true
  only:
    - main
    - develop

# =====================================
# PRODUCTION DEPLOYMENT
# =====================================

deploy-production-backend:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying backend to production environment..."
    - curl -X POST "$PRODUCTION_WEBHOOK_URL" -H "Content-Type: application/json" -d '{"version":"'$CI_COMMIT_SHA'","environment":"production","service":"backend"}'
    - echo "Running production health checks..."
    - sleep 30
    - curl -f $PRODUCTION_HEALTH_URL || (echo "Health check failed, triggering rollback..."; exit 1)
  environment:
    name: production
    url: $PRODUCTION_API_URL
  only:
    - main

deploy-production-mobile-ios:
  stage: deploy-production
  image: ruby:3.1
  before_script:
    - cd mobile/fastlane
    - bundle install
  script:
    - cd mobile/fastlane
    - bundle exec fastlane ios release
  environment:
    name: production
  only:
    - main
  allow_failure: true

deploy-production-mobile-android:
  stage: deploy-production
  image: ruby:3.1
  before_script:
    - cd mobile/fastlane
    - bundle install
  script:
    - cd mobile/fastlane
    - bundle exec fastlane android release
  environment:
    name: production
  only:
    - main

# =====================================
# CLEANUP JOBS
# =====================================

cleanup-staging:
  stage: deploy-production
  image: alpine:latest
  script:
    - echo "Cleaning up old staging deployments..."
  only:
    - schedules
  when: manual

# =====================================
# NOTIFICATION JOBS
# =====================================

notify-success:
  stage: deploy-production
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - |
      MESSAGE=$(echo "✅ Deployment successful!" \
      "- Service: $CI_JOB_NAME" \
      "- Environment: $CI_ENVIRONMENT_NAME" \
      "- Commit: $CI_COMMIT_SHORT_SHA" \
      "- Branch: $CI_COMMIT_REF_NAME")
      
    - curl -X POST "$SLACK_WEBHOOK_URL" -H 'Content-Type: application/json' -d '{"text":"'$MESSAGE'"}'
  when: on_success
  only:
    - main
    - develop

notify-failure:
  stage: deploy-production
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - |
      MESSAGE=$(echo "❌ Deployment failed!" \
      "- Service: $CI_JOB_NAME" \
      "- Environment: $CI_ENVIRONMENT_NAME" \
      "- Commit: $CI_COMMIT_SHORT_SHA" \
      "- Branch: $CI_COMMIT_REF_NAME")
      
    - curl -X POST "$SLACK_WEBHOOK_URL" -H 'Content-Type: application/json' -d '{"text":"'$MESSAGE'"}'
  when: on_failure
  only:
    - main
    - develop
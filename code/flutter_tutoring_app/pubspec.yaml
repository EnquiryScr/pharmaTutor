name: flutter_tutoring_app
description: A comprehensive tutoring platform with Firebase integration for real-time messaging, assignment management, and offline synchronization.

version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'
  flutter: ">=3.10.0"

dependencies:
  flutter:
    sdk: flutter

  # Firebase Core & Services
  firebase_core: ^2.24.2
  firebase_auth: ^4.15.3
  cloud_firestore: ^4.13.6
  firebase_storage: ^11.6.0
  firebase_analytics: ^10.7.4
  firebase_crashlytics: ^3.4.8
  firebase_messaging: ^14.7.10
  firebase_remote_config: ^4.3.8
  cloud_functions: ^5.0.2

  # State Management
  flutter_bloc: ^8.1.3
  bloc: ^8.1.2
  provider: ^6.1.1

  # Authentication & Security
  local_auth: ^2.1.7
  flutter_secure_storage: ^9.0.0
  crypto: ^3.0.3
  pointycastle: ^3.7.3
  encrypt: ^5.0.1

  # Local Storage & Cache
  shared_preferences: ^2.2.2
  sqflite: ^2.3.0
  path: ^1.8.3
  connectivity_plus: ^5.0.2
  path_provider: ^2.1.1

  # HTTP & Networking
  http: ^1.1.2
  dio: ^5.4.0

  # Performance Optimization Dependencies
  flutter_cache_manager: ^3.3.1
  battery_plus: ^5.0.2
  memory_cache: ^0.1.0+1
  crypto: ^3.0.3
  mime: ^1.0.4

  # UI & Theme
  cupertino_icons: ^1.0.6
  flutter_svg: ^2.0.9
  cached_network_image: ^3.3.0
  lottie: ^2.7.0
  shimmer: ^3.0.0
  flutter_localizations:
    sdk: flutter

  # Navigation & Routing
  go_router: ^12.1.3
  auto_route: ^7.8.4

  # Validation & Form Handling
  reactive_forms: ^17.0.1
  form_validator: ^2.1.1

  # Utilities
  intl: any
  uuid: ^4.2.1
  json_annotation: ^4.8.1
  package_info_plus: ^4.2.0
  device_info_plus: ^9.1.1
  timeago: ^3.6.0

  # Platform-specific packages
  url_launcher: ^6.2.1
  share_plus: ^7.2.1

  # Permission handling
  permission_handler: ^11.0.1

  # Image & File Handling
  image_picker: ^1.0.4
  image: ^4.1.3
  file_picker: ^6.1.1
  mime: ^1.0.4

  # Date & Time
  timezone: ^0.9.2

  # Notifications
  local_notifications: ^6.0.0
  flutter_local_notifications: ^16.1.0

  # Social Authentication (optional)
  google_sign_in: ^6.1.6
  sign_in_with_apple: ^5.0.0
  flutter_facebook_auth: ^6.1.1

  # Charts & Analytics
  fl_chart: ^0.64.0

  # PDF Handling
  pdf: ^3.10.7
  printing: ^5.11.1

  # Video/Audio (for tutoring sessions)
  video_player: ^2.8.1
  audioplayers: ^5.2.1
  record: ^5.0.1

  # WebRTC for video calling and screen sharing
  flutter_webrtc: ^0.9.40
  signaling: ^0.0.16
  simple_peer: ^0.1.4

  # Interactive Whiteboard
  flutter_drawing_canvas: ^0.3.0
  touchable: ^2.0.0
  vector_graphics: ^1.1.9+1

  # Drawing and Annotation
  signature: ^5.4.0
  pdf_render: ^1.1.7
  annotate_base: ^2.3.2

  # Quiz and Assessment
  percent_indicator: ^4.2.3
  confetti: ^0.12.0
  material_design_icons: ^7.0.9696

  # Screen Sharing
  screen_capture: ^1.0.1

  # Search and Filtering
  elastic_client: ^0.3.4
  fuse: ^7.0.0

  # Charts and Analytics
  syncfusion_flutter_charts: ^24.1.41
  syncfusion_flutter_gauges: ^24.1.41

  # Content Creation
  camera: ^0.10.5+9
  gallery_saver: ^2.3.2
  path_drawing: ^1.1.0

  # Accessibility
  accessibility_tools: ^1.0.3

  # Multi-language
  easy_localization: ^3.0.3

  # OTP & SMS
  sms_otp_autofill: ^1.0.5
  intl_phone_number_field: ^0.7.4

  # Language & Localization
  flutter_localizations:
    sdk: flutter

  # iOS specific
  apple_sign_in: ^0.1.0

  # Android specific
  biometric_storage: ^3.0.1

  # Utility Libraries
  equatable: ^2.0.5

dev_dependencies:
  flutter_test:
    sdk: flutter

  # Linting
  flutter_lints: ^3.0.0

  # Performance & Analysis Tools
  dart_code_metrics: ^5.7.6
  merge_xml: ^2.1.1

  # Code Generation
  json_serializable: ^6.7.1
  freezed: ^2.4.6
  freezed_annotation: ^2.4.1
  build_runner: ^2.4.7

  # Database code generation
  drift_dev: ^2.14.0

  # Testing
  bloc_test: ^9.1.4
  mockito: ^5.4.3

  # State management
  integration_test:
    sdk: flutter

  # Dependency injection
  get_it: ^7.6.4
  injectable: ^2.3.2

  # UI testing
  golden_toolkit: ^0.15.0

flutter:
  uses-material-design: true

  # Assets
  assets:
    - assets/images/
    - assets/icons/
    - assets/animations/
    - assets/sounds/
    - assets/data/

  # Fonts
  fonts:
    - family: Inter
      fonts:
        - asset: assets/fonts/Inter-Regular.ttf
        - asset: assets/fonts/Inter-Medium.ttf
          weight: 500
        - asset: assets/fonts/Inter-SemiBold.ttf
          weight: 600
        - asset: assets/fonts/Inter-Bold.ttf
          weight: 700

# Flutter configuration
flutter_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/icon/app_icon.png"
  min_sdk_android: 21

# Platform-specific configurations
flutter_native_splash:
  color: "#2196F3"
  image: "assets/icon/splash_icon.png"
  android_12:
    image: "assets/icon/splash_icon.png"
    color: "#2196F3"

# Dart analysis
analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
  errors:
    invalid_annotation_target: ignore

# Build configurations
build_runner:
  throw_on_dynamic_casts: true
  throw_on_unresolved_type: false

# Dependency overrides (use with caution)
dependency_overrides:
  http: ^1.1.0

# Firebase Configuration Notes:
# 1. Add google-services.json (Android) to android/app/
# 2. Add GoogleService-Info.plist (iOS) to ios/Runner/
# 3. Enable Authentication, Firestore, Storage, Functions in Firebase Console
# 4. Deploy security rules using: firebase deploy --only firestore:rules,storage
# 5. Configure Push Notification certificates for iOS
# 6. Set up Firebase Cloud Functions for server-side operations

# Security Notes:
# - Never commit API keys or sensitive configuration to version control
# - Use Firebase Remote Config for environment-specific settings
# - Implement proper Firestore security rules for data protection
# - Validate file uploads and sizes in security rules
# - Use Firebase App Check for additional security (optional)

# Performance Notes:
# - Use Firestore indexes for efficient queries
# - Implement pagination for large datasets
# - Cache frequently accessed data using Offline Sync Service
# - Use compression for file uploads when possible
# - Monitor Firebase usage and costs regularly

# Offline Support:
# - Offline sync is enabled by default
# - SQLite database automatically manages cached data
# - Sync queue handles offline operations when connection is restored
# - Configure cache sizes in FirebaseConfig if needed

# Testing Notes:
# - Use Firebase emulators for development
# - Mock Firebase services for unit testing
# - Implement integration tests for critical flows
# - Test offline functionality thoroughly

# Deployment Checklist:
# [ ] Update Firebase project configuration
# [ ] Deploy Firestore and Storage security rules
# [ ] Set up Firebase Cloud Functions (if needed)
# [ ] Configure push notifications
# [ ] Test authentication flows
# [ ] Verify offline synchronization
# [ ] Check analytics tracking
# [ ] Test error handling and crash reporting
# [ ] Validate file upload limits
# [ ] Review and test security rules